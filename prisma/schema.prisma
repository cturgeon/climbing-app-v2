datasource db {
  provider = "mongodb"
  url      = env("DATABASE")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  role          String    @default("user")
  log           Log[]
  comment       Comment[]
}

model Log {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now()) @map(name: "created_at")
  wall      Wall     @relation(fields: [wallId], references: [id])
  grade     Int
  attempts  Int
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  wallId    String   @db.ObjectId
}

model Gym {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  address     String
  description String
  image       String
  walls       Wall[]
}

model Wall {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name  String
  image String

  gym   Gym?    @relation(fields: [gymId], references: [id])
  gymId String? @db.ObjectId

  routes Route[]
  log    Log[]
}

model Route {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name        String
  color       String
  grade       String
  description String
  image       String

  wall   Wall?   @relation(fields: [wallId], references: [id])
  wallId String? @db.ObjectId

  comments Comment[]
}

model Comment {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment String

  route   Route?  @relation(fields: [routeId], references: [id])
  routeId String? @db.ObjectId
}
